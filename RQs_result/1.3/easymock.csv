"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createStrictControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createNiceControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createStrictControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createNiceControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createStrictControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createNiceControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createStrictControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createNiceControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createStrictControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createNiceControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createStrictControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createNiceControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createStrictControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createNiceControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createStrictControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createNiceControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createStrictControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createNiceControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createStrictControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createNiceControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createStrictControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return createNiceControl(classToMock);
}
"
"/** 
 * @param classToMock
 * @param constructorTypes
 * @param constructorArgs
 * @param mockedMethods
 * @param < T >
 * @return
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method[] mockedMethods){
  return createControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createStrictControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createStrictControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createStrictControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createStrictControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createStrictControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use  {@link #createNiceControl(Class)}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs){
  return (MockClassControl<T>)createNiceControl(classToMock);
}
"
"/** 
 * @deprecated No need to pick a constructor anymore. Constructor argumentsare now ignored. Just use {@link #createNiceControl(Class,Method[])}
 */
@Deprecated public static <T>MockClassControl<T> createNiceControl(Class<T> classToMock,Class<?>[] constructorTypes,Object[] constructorArgs,Method... mockedMethods){
  return createNiceControl(classToMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)}instead
 */
@Deprecated public static <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Expect any boolean but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static boolean capture(final Capture<Boolean> captured){
  return captureBoolean(captured);
}
"
"/** 
 * Expect any int but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static int capture(final Capture<Integer> captured){
  return captureInt(captured);
}
"
"/** 
 * Expect any long but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static long capture(final Capture<Long> captured){
  return captureLong(captured);
}
"
"/** 
 * Expect any float but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static float capture(final Capture<Float> captured){
  return captureFloat(captured);
}
"
"/** 
 * Expect any double but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static double capture(final Capture<Double> captured){
  return captureDouble(captured);
}
"
"/** 
 * Expect any byte but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static byte capture(final Capture<Byte> captured){
  return captureByte(captured);
}
"
"/** 
 * Expect any char but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static char capture(final Capture<Character> captured){
  return captureChar(captured);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Expect any boolean but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static boolean capture(final Capture<Boolean> captured){
  return captureBoolean(captured);
}
"
"/** 
 * Expect any int but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static int capture(final Capture<Integer> captured){
  return captureInt(captured);
}
"
"/** 
 * Expect any long but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static long capture(final Capture<Long> captured){
  return captureLong(captured);
}
"
"/** 
 * Expect any float but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static float capture(final Capture<Float> captured){
  return captureFloat(captured);
}
"
"/** 
 * Expect any double but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static double capture(final Capture<Double> captured){
  return captureDouble(captured);
}
"
"/** 
 * Expect any byte but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static byte capture(final Capture<Byte> captured){
  return captureByte(captured);
}
"
"/** 
 * Expect any char but captures it for later use.
 * @param captured Where the parameter is captured
 * @return <code>0</code>
 * @deprecated Because of harder erasure enforcement, doesn't compile inJava 7
 */
@Deprecated public static char capture(final Capture<Character> captured){
  return captureChar(captured);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is enabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that implements the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the interface that the mock object should implement.
 * @param name the name of the mock object.
 * @param toMock the class of the interface that the mock object should implement.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(String name,Class<T> toMock,ConstructorArgs constructorArgs,Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(final CaptureType type){
  this.type=type;
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(final CaptureType type){
  this.type=type;
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(final CaptureType type){
  this.type=type;
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(final CaptureType type){
  this.type=type;
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class or interface that should be mocked.
 * @param name the name of the mock object.
 * @param toMock the class or interface that should be mocked.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public static <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is enabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createStrictMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createStrictControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Creates a mock object that extends the given class, order checking is disabled by default, and the mock object will return <code>0</code>, <code>null</code> or <code>false</code> for unexpected invocations.
 * @param < T > the class that the mock object should extend.
 * @param name the name of the mock object.
 * @param toMock the class that the mock object should extend.
 * @param constructorArgs constructor and parameters used to instantiate the mock.
 * @param mockedMethods methods that will be mocked, other methods will behave normally
 * @return the mock object.
 * @deprecated Use {@link #createMockBuilder(Class)} instead
 */
@Deprecated public <T>T createNiceMock(final String name,final Class<T> toMock,final ConstructorArgs constructorArgs,final Method... mockedMethods){
  return createNiceControl().createMock(name,toMock,constructorArgs,mockedMethods);
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(CaptureType type){
  this.type=type;
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(CaptureType type){
  this.type=type;
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(CaptureType type){
  this.type=type;
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(CaptureType type){
  this.type=type;
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(CaptureType type){
  this.type=type;
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(CaptureType type){
  this.type=type;
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(CaptureType type){
  this.type=type;
}
"
"/** 
 * Default constructor. Only the last element will be captured
 * @deprecated Use {@link EasyMock#newCapture()} instead
 */
@Deprecated public Capture(){
  this(CaptureType.LAST);
}
"
"/** 
 * Constructor allowing to select the capture type
 * @param type capture type
 * @deprecated Use {@link org.easymock.EasyMock#newCapture(CaptureType)} instead
 */
@Deprecated public Capture(CaptureType type){
  this.type=type;
}
"
"/** 
 * Return the class of interface (depending on the mock type) that was mocked
 * @param < T > Mocked class
 * @param < V > Mock class
 * @param proxy Mock object
 * @return the mocked class or interface
 * @deprecated use {@link #getMockedClass(Object)} instead
 */
@Deprecated public static <T,R extends T>Class<R> getMockedType(T proxy){
  return getMockedClass(proxy);
}
"
"/** 
 * Return the class of interface (depending on the mock type) that was mocked
 * @param < T > Mocked class
 * @param < R > Mock class
 * @param proxy Mock object
 * @return the mocked class or interface
 * @deprecated use {@link #getMockedClass(Object)} instead
 */
@Deprecated public static <T,R extends T>Class<R> getMockedType(T proxy){
  return getMockedClass(proxy);
}
"
